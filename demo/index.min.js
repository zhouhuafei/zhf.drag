(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
const Drag = require('../dist/index.min');
const offset = require('zhf.offset');
const checkDomImpact = require('zhf.check-dom-impact'); // 检测dom碰撞

// 随机添加样式
let strStyle = '';
for (let i = 1; i <= 9; i++) {
    const r = Math.round(Math.random() * 255);
    const g = Math.round(Math.random() * 255);
    const b = Math.round(Math.random() * 255);
    const a = Math.round(Math.random() * (10 - 1) + 1) / 10; // 0.1 - 0.9
    const h = Math.round(Math.random() * (60 - 14) + 14);
    strStyle += `.wrap .item${i}{height:${h}px;background:rgba(${r},${g},${b},1);}`;
}
document.querySelector('style').innerHTML += strStyle;

// zero
const zeroWrap = document.querySelector('.zero-wrap');
const zero = zeroWrap.querySelector('.zero');
new Drag({
    item: zero,
    callback: {
        mouseDownBefore: function (obj) {
        },
        mouseDownAfter: function (obj) {
        },
        mouseMoveBefore: function (obj) {
        },
        mouseMoveAfter: function (obj) {
        },
        mouseUpBefore: function (obj) {
        },
        mouseUpAfter: function (obj) {
        },
    },
    config: {
        hasIconMove: true, // 默认
        direction: 'all', // 默认，其他：'row'，'col'
        limitLeftMin: 0,
        limitLeftMax: zeroWrap.offsetWidth - zero.offsetWidth,
        limitTopMin: 0,
        limitTopMax: zeroWrap.offsetHeight - zero.offsetHeight,
        isAdsorption: true,
        adsorptionDistance: 20, // 默认
    },
    data: {},
});

// hint
const hint = document.createElement('span');
hint.className = 'drag-hint';
hint.innerHTML = `松开放到此处`;

// wrap1拖拽
const wrap1 = document.querySelector('.wrap1');
let item1All = wrap1.querySelectorAll('.item');
const drag1 = new Drag({
    item: item1All,
    callback: {
        mouseDownBefore(obj) {
            const self = obj.self;
            const dom = obj.dom;
            dom.classList.add('active');
            dom.style.left = `${dom.offsetLeft}px`;
            dom.style.top = `${dom.offsetTop}px`;
            hint.style.height = `${dom.offsetHeight}px`;
            wrap1.insertBefore(hint, dom);
            self.opts.config.limitTopMax = wrap1.offsetHeight - dom.offsetHeight;
        },
        mouseMoveAfter(obj) {
            const dom = obj.dom;
            const moveDirectionY = obj.moveDirectionY;
            const impact = [];
            item1All.forEach(function (item) {
                if (item !== dom && checkDomImpact(dom, item).isImpact) {
                    impact.push(item);
                }
            });
            const domTop = dom.offsetTop;
            const domHeight = dom.offsetHeight;
            const domBottom = domTop + domHeight;
            impact.forEach(function (item) {
                const itemTop = item.offsetTop;
                const itemHeight = item.offsetHeight;
                if (moveDirectionY === 'top' && domTop <= itemTop + itemHeight / 2) {
                    wrap1.insertBefore(hint, item);
                }
                if (moveDirectionY === 'bottom' && domBottom >= itemTop + itemHeight / 2) {
                    wrap1.insertBefore(hint, item.nextElementSibling); // item.nextElementSibling如果是null相当于执行了appendChild
                }
            });
        },
        mouseUpAfter(obj) {
            const dom = obj.dom;
            dom.classList.remove('active');
            dom.setAttribute('style', '');
            wrap1.insertBefore(obj.dom, hint);
            wrap1.removeChild(hint);
        },
    },
    config: {
        limitTopMin: 0,
        direction: 'col',
    },
    data: {},
});

// wrap2拖拽
const wrap2 = document.querySelector('.wrap2');
const item2All = wrap2.querySelectorAll('.item');
new Drag({
    item: item2All,
    callback: {
        mouseDownBefore(obj) {
            const dom = obj.dom;
            hint.style.height = `${dom.offsetHeight}px`;
            if (dom.cloneDom) { // 防止重复创建cloneDom
                return;
            }
            dom.classList.add('highlight');
            dom.cloneDom = dom.cloneNode(true);
            dom.hasHint = false; // 是否存在提示
            dom.isImpact = false; // 是否碰撞了
            dom.classList.add('active');
            dom.style.left = `${dom.offsetLeft}px`;
            dom.style.top = `${dom.offsetTop}px`;
            wrap2.insertBefore(dom.cloneDom, dom);
        },
        mouseMoveAfter(obj) {
            const dom = obj.dom;
            dom.isImpact = checkDomImpact(dom, wrap1).isImpact; // 是否碰撞了
            const moveDirectionY = obj.moveDirectionY;
            const domLeft = offset(dom).left;
            const domTop = offset(dom).top;
            const domWidth = dom.offsetWidth;
            const domHeight = dom.offsetHeight;
            const domBottom = domTop + domHeight;
            const domCenterX = domLeft + domWidth / 2;
            const domCenterY = domTop + domHeight / 2;
            let minDistanceDom = null;
            let minDistance = null;
            if (dom.isImpact) { // 如果碰撞了，找到和dom碰的最近的那个item
                item1All.forEach(function (item) {
                    const itemLeft = offset(item).left;
                    const itemTop = offset(item).top;
                    const itemWidth = item.offsetWidth;
                    const itemHeight = item.offsetHeight;
                    const itemCenterX = itemLeft + itemWidth / 2;
                    const itemCenterY = itemTop + itemHeight / 2;
                    const x = Math.abs(domCenterX - itemCenterX);
                    const y = Math.abs(domCenterY - itemCenterY);
                    const nowMinDistance = Math.sqrt(x * x + y * y);
                    if (minDistance === null) {
                        minDistance = nowMinDistance;
                        minDistanceDom = item;
                    } else {
                        if (minDistance > nowMinDistance) {
                            minDistance = nowMinDistance;
                            minDistanceDom = item;
                        }
                    }
                });
            } else { // 如果没碰撞，则移除掉提示，并不继续往下走了
                if (dom.hasHint) {
                    wrap1.removeChild(hint);
                    dom.hasHint = false;
                }
                return;
            }
            if (dom.isImpact && !minDistanceDom) { // 碰撞了，但是最近的却不存在，说明父级容器是空的
                wrap1.appendChild(hint);
                dom.hasHint = true;
                return;
            }
            const minDistanceDomTop = offset(minDistanceDom).top;
            const minDistanceDomHeight = minDistanceDom.offsetHeight;
            if (moveDirectionY === 'top') { // 向上碰撞了
                if (domTop <= minDistanceDomTop + minDistanceDomHeight / 2) {
                    wrap1.insertBefore(hint, minDistanceDom);
                    dom.hasHint = true;
                }
            }
            if (moveDirectionY === 'bottom') { // 向下碰撞了
                if (domBottom >= minDistanceDomTop + minDistanceDomHeight / 2) {
                    wrap1.insertBefore(hint, minDistanceDom.nextElementSibling); // minDistanceDom.nextElementSibling如果是null相当于执行了appendChild
                    dom.hasHint = true;
                }
            }
        },
        mouseUpAfter: function (obj) {
            const dom = obj.dom;
            /*
            * isImpact === true，表示碰撞了。
            * 因为上面hint生成条件限制，导致hint不一定存在与wrap1中。
            * 如果满足条件，则创建一个新的item。
            * 给item加拖拽并更新item1All
            * */
            if (dom.isImpact && hint.parentNode !== null) {
                const itemNew = document.createElement('span');
                itemNew.className = `item item${/item(\d+)/.exec(dom.className)[1]}`;
                itemNew.innerHTML = dom.innerHTML;
                drag1.events(itemNew);
                wrap1.replaceChild(itemNew, hint);
                item1All = wrap1.querySelectorAll('.item');
            }
            // 松开鼠标，还原dom的位置，并移除掉cloneDom
            dom.classList.remove('highlight');
            dom.classList.remove('active');
            dom.setAttribute('style', '');
            wrap2.replaceChild(dom, dom.cloneDom);
            delete dom.cloneDom;
        },
    },
    config: {},
    data: {},
});

},{"../dist/index.min":2,"zhf.check-dom-impact":3,"zhf.offset":6}],2:[function(require,module,exports){
"use strict";var _createClass=function(){function e(e,o){for(var i=0;i<o.length;i++){var t=o[i];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}return function(o,i,t){return i&&e(o.prototype,i),t&&e(o,t),o}}();function _classCallCheck(e,o){if(!(e instanceof o))throw new TypeError("Cannot call a class as a function")}var extend=require("zhf.extend"),getDomArray=require("zhf.get-dom-array"),Super=function(){function e(o){var i=this;_classCallCheck(this,e),this.opts=extend({item:"",callback:{mouseDownBefore:function(e){},mouseDownAfter:function(e){},mouseMoveBefore:function(e){},mouseMoveAfter:function(e){},mouseUpBefore:function(e){},mouseUpAfter:function(e){}},config:{hasIconMove:!0,direction:"all",limitLeftMin:null,limitLeftMax:null,limitTopMin:null,limitTopMax:null,isAdsorption:!1,adsorptionDistance:20},data:{}},o),getDomArray(this.opts.item).forEach(function(e){i.events(e)})}return _createClass(e,[{key:"events",value:function(e){var o=this,i=o.opts.config;function t(i){i.preventDefault(),i.stopPropagation();var t=o.opts,n=t.callback;n.mouseMoveBefore({self:o,ev:i,dom:e,moveDistanceX:o.moveDistanceX,moveDistanceY:o.moveDistanceY,moveDirectionX:o.moveDirectionX,moveDirectionY:o.moveDirectionY,overDistanceX:o.overDistanceX,overDistanceY:o.overDistanceY,overDirectionX:o.overDirectionX,overDirectionY:o.overDirectionY});var r=t.config,c=r.direction,v=i.clientX-o.disX,s=i.clientY-o.disY;null!==r.limitLeftMin&&(r.isAdsorption?v<=r.limitLeftMin+r.adsorptionDistance&&(v=r.limitLeftMin):v<=r.limitLeftMin&&(v=r.limitLeftMin)),null!==r.limitLeftMax&&(r.isAdsorption?v>=r.limitLeftMax-r.adsorptionDistance&&(v=r.limitLeftMax):v>=r.limitLeftMax&&(v=r.limitLeftMax)),null!==r.limitTopMin&&(r.isAdsorption?s<=r.limitTopMin+r.adsorptionDistance&&(s=r.limitTopMin):s<=r.limitTopMin&&(s=r.limitTopMin)),null!==r.limitTopMax&&(r.isAdsorption?s>=r.limitTopMax-r.adsorptionDistance&&(s=r.limitTopMax):s>=r.limitTopMax&&(s=r.limitTopMax)),e.style.right="auto",e.style.bottom="auto","all"===c&&(e.style.left=v+"px",e.style.top=s+"px"),"col"===c&&(e.style.top=s+"px"),"row"===c&&(e.style.left=v+"px"),o.moveDistanceX=i.clientX-o.prevMoveClientX,o.moveDistanceY=i.clientY-o.prevMoveClientY,o.moveDistanceX>0?o.moveDirectionX="right":o.moveDistanceX<0&&(o.moveDirectionX="left"),o.moveDistanceY>0?o.moveDirectionY="bottom":o.moveDistanceY<0&&(o.moveDirectionY="top"),o.prevMoveClientX=i.clientX,o.prevMoveClientY=i.clientY,o.overDistanceX=i.clientX-o.mouseDownClientX,o.overDistanceY=i.clientY-o.mouseDownClientY,o.overDistanceX>0?o.overDirectionX="right":o.overDistanceX<0&&(o.overDirectionX="left"),o.overDistanceY>0?o.overDirectionY="bottom":o.overDistanceY<0&&(o.overDirectionY="top"),n.mouseMoveAfter({self:o,ev:i,dom:e,moveDistanceX:o.moveDistanceX,moveDistanceY:o.moveDistanceY,moveDirectionX:o.moveDirectionX,moveDirectionY:o.moveDirectionY,overDistanceX:o.overDistanceX,overDistanceY:o.overDistanceY,overDirectionX:o.overDirectionX,overDirectionY:o.overDirectionY})}function n(i){i.preventDefault(),i.stopPropagation();var r=o.opts.callback;r.mouseUpBefore({self:o,ev:i,dom:e,moveDistanceX:o.moveDistanceX,moveDistanceY:o.moveDistanceY,moveDirectionX:o.moveDirectionX,moveDirectionY:o.moveDirectionY,overDistanceX:o.overDistanceX,overDistanceY:o.overDistanceY,overDirectionX:o.overDirectionX,overDirectionY:o.overDirectionY}),document.removeEventListener("mousemove",t),document.removeEventListener("mouseup",n),r.mouseUpAfter({self:o,ev:i,dom:e,moveDistanceX:o.moveDistanceX,moveDistanceY:o.moveDistanceY,moveDirectionX:o.moveDirectionX,moveDirectionY:o.moveDirectionY,overDistanceX:o.overDistanceX,overDistanceY:o.overDistanceY,overDirectionX:o.overDirectionX,overDirectionY:o.overDirectionY})}"static"===getComputedStyle(e).position&&(e.style.position="relative"),i.hasIconMove&&"move"!==getComputedStyle(e).cursor&&(e.style.cursor="move"),e.addEventListener("mousedown",function(i){i.preventDefault(),i.stopPropagation();var r=o.opts;o.moveDistanceX=0,o.moveDistanceY=0,o.moveDirectionX="no-move",o.moveDirectionY="no-move",o.overDistanceX=0,o.overDistanceY=0,o.overDirectionX="no-move",o.overDirectionY="no-move",o.prevMoveClientX=i.clientX,o.prevMoveClientY=i.clientY,o.mouseDownClientX=i.clientX,o.mouseDownClientY=i.clientY;var c=r.callback;c.mouseDownBefore({self:o,ev:i,dom:e,moveDistanceX:o.moveDistanceX,moveDistanceY:o.moveDistanceY,moveDirectionX:o.moveDirectionX,moveDirectionY:o.moveDirectionY,overDistanceX:o.overDistanceX,overDistanceY:o.overDistanceY,overDirectionX:o.overDirectionX,overDirectionY:o.overDirectionY});var v=getComputedStyle(this);o.oGetComputedStyle=v,o.disX=i.clientX-v.left.replace("px",""),o.disY=i.clientY-v.top.replace("px",""),document.addEventListener("mousemove",t),document.addEventListener("mouseup",n),c.mouseDownAfter({self:o,ev:i,dom:e,moveDistanceX:o.moveDistanceX,moveDistanceY:o.moveDistanceY,moveDirectionX:o.moveDirectionX,moveDirectionY:o.moveDirectionY,overDistanceX:o.overDistanceX,overDistanceY:o.overDistanceY,overDirectionX:o.overDirectionX,overDirectionY:o.overDirectionY})})}}]),e}();module.exports=Super;
},{"zhf.extend":4,"zhf.get-dom-array":5}],3:[function(require,module,exports){
"use strict";var offset=require("zhf.offset"),getDomArray=require("zhf.get-dom-array");function checkDomImpact(t,o){var e=getDomArray(t)[0],f="overlay",r="overlay",i=offset(e).left,s=offset(e).top,a=i+e.offsetWidth/2,h=s+e.offsetHeight/2,m=getDomArray(o)[0],g="overlay",c="overlay",l=offset(m).left,n=offset(m).top,p=l+m.offsetWidth/2,y=n+m.offsetHeight/2;a-p>0?(f="right",g="left"):a-p<0&&(f="left",g="right"),h-y>0?(r="bottom",c="top"):h-y<0&&(r="top",c="bottom");var v=i>l+m.offsetWidth,d=i+e.offsetWidth<l,u=s>n+m.offsetHeight,D=s+e.offsetHeight<n;return{isImpact:!(v||d||u||D),onePositionX:f,onePositionY:r,twoPositionX:g,twoPositionY:c}}module.exports=checkDomImpact;
},{"zhf.get-dom-array":5,"zhf.offset":6}],4:[function(require,module,exports){
"use strict";function extend(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],r=Object.prototype.toString.call(t).slice(8,-1).toLowerCase();return r===Object.prototype.toString.call(e).slice(8,-1).toLowerCase()&&o&&("object"===r||"array"===r)?Object.keys(e).forEach(function(r){var c=Object.prototype.toString.call(t[r]).slice(8,-1).toLowerCase();c===Object.prototype.toString.call(e[r]).slice(8,-1).toLowerCase()&&o&&("object"===c||"array"===c)?extend(t[r],e[r]):t[r]=e[r]}):t=e,t}module.exports=extend;
},{}],5:[function(require,module,exports){
"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e,t){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):("object"!==Object.prototype.toString.call(window.zhf).slice(8,-1).toLowerCase()&&(window.zhf={}),window.zhf.getDomArray=t())}(0,function(){function e(e,t){for(var o=t;o!==e&&null!==o;)o=o.parentNode;return o===e}return function(t,o){var n=[],l=document;if(o&&(l="string"===Object.prototype.toString.call(o).slice(8,-1).toLowerCase()?document.querySelector(o):1===o.nodeType?o:o===document?o:"htmlcollection"===Object.prototype.toString.call(o).slice(8,-1).toLowerCase()||"nodelist"===Object.prototype.toString.call(o).slice(8,-1).toLowerCase()?[].slice.call(o)[0]:null),!l)return[];if(t)if("string"===Object.prototype.toString.call(t).slice(8,-1).toLowerCase())n=[].slice.call(l.querySelectorAll(t));else if(1===t.nodeType)n=[t],o&&(e(l,t)||(n=[]));else if(t===document)n=[t],o&&(n=[]);else if(("htmlcollection"===Object.prototype.toString.call(t).slice(8,-1).toLowerCase()||"nodelist"===Object.prototype.toString.call(t).slice(8,-1).toLowerCase())&&(n=[].slice.call(t),o)){var r=[];n.forEach(function(t){e(l,t)&&r.push(t)}),n=r}return n}});
},{}],6:[function(require,module,exports){
"use strict";var getDomArray=require("zhf.get-dom-array");function offset(e){var t=0,r=0;for(e=getDomArray(e)[0];e;)t+=e.offsetTop,r+=e.offsetLeft,e=e.offsetParent;return{top:t,left:r}}module.exports=offset;
},{"zhf.get-dom-array":5}]},{},[1])